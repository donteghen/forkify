"use strict";

require("core-js/modules/web.immediate.js");

require("core-js/modules/web.url.js");

require("core-js/modules/web.url.to-json.js");

require("core-js/modules/web.url-search-params.js");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// * **for polyfilling async / await
//const recipeContainer = document.querySelector('.recipe');
//const eventCollection = ['load', 'hashchange'];
// https://forkify-api.herokuapp.com/v2
///////////////////////////////////////
const recipeController = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;

    _recipeView.default.renderSinner();

    await model.loadRecipe(id);

    _recipeView.default.render(model.state.recipe);
  } catch (error) {
    //alert(error);
    _recipeView.default.renderError();
  }
};

const searchController = async function (query) {
  try {
    if (!query) return;
    const data = await model.loadSearchResult('pizza');
    console.log(model.state.search);
  } catch (error) {
    _recipeView.default.renderError();
  }
};

searchController();

const init = function () {
  _recipeView.default.addHandlerRender(recipeController);

  _searchView.default.addHandlerSearch(searchController);
};

init();