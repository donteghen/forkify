"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// parcel2
class View {
  constructor() {
    _defineProperty(this, "_data", void 0);
  }

  render(data) {
    if (!data || Array.isArray(data) && data.length === 0) {
      this.renderError();
      return;
    }

    this._data = data;

    const markUp = this._generateMarkUp();

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markUp);
  }

  renderUpdate(data) {
    if (!data || Array.isArray(data) && data.length === 0) {
      this.renderError();
      return;
    }

    this._data = data;

    const newMarkUp = this._generateMarkUp();

    const newDOM = document.createRange().createContextualFragment(newMarkUp);
    const newElements = Array.from(newDOM.querySelectorAll('*'));
    const currElements = Array.from(this._parentElement.querySelectorAll('*'));
    newElements.forEach((newEl, i) => {
      const currEl = currElements[i];

      if (!newEl.isEqualNode(currEl) && newEl.nodeValue) {
        currEl.textContent = newEl.textContent;
      }
    });
    console.log(newElements);
  }

  renderSpinner() {
    this._clear();

    const markup = `
       <div class="spinner">
        <svg>
          <use href="${_icons.default}#icon-loader"></use>
        </svg>
      </div> 
      `;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderError(message = this._errorMessage) {
    const markup = `
        <div class="error">
        <div>
          <svg>
            <use href="${_icons.default}#icon-alert-triangle"></use>
          </svg>
        </div>
        <p>${message}</p>
      </div>
        `;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderSuccess(message = this._successMessage) {
    const markup = `
        <div class="error">
        <div>
          <svg>
            <use href="${_icons.default}#icon-smile"></use>
          </svg>
        </div>
        <p>${message}</p>
      </div>
        `;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  _clear() {
    this._parentElement.innerHTML = '';
  }

  addHandlerRender(handler) {
    ['load', 'hashchange'].forEach(ev => window.addEventListener(ev, handler));
  }

}

exports.default = View;